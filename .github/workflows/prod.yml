name: prod

on:
  release:
    types: [ released ]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

jobs:
  build_and_push:
    name: Build & push prod images (matrix)
    runs-on: ubuntu-latest
    # On ne build en prod que quand on pousse un tag vX.Y.Z
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      IMAGE_BASE: ghcr.io/${{ github.repository }}
      TAG_BASE: prod
      VERSION: ${{ github.event.release.tag_name }}   # ex: v1.2.3
    strategy:
      matrix:
        service:
          - name: app
            context: ./app
            dockerfile: ./docker/Dockerfile
            target: prod
            # ajouter ici les différents services si besoin
    steps:
      - name: Compute tag timestamp (UTC)
        run: echo "TAG_TS=$(date -u +%Y.%m.%d-%H%M)" >> $GITHUB_ENV

      - name: Checkout code at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          target: ${{ matrix.service.target }}
          push: true
          platforms: linux/amd64
          build-args: |
            NODE_VERSION=22.16.0
          tags: |
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ github.sha }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ env.VERSION }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ env.TAG_TS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build_and_push
    name: Deploy to Ionos Prod
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: prod-${{ github.event.release.tag_name }}   # prod-vX.Y.Z
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Write SSH key with proper formatting
          printf '%s\n' "${{ secrets.IONOS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          
          # Debug: Check key format and size
          echo "SSH key file size:"
          wc -c ~/.ssh/id_rsa
          echo "SSH key first line:"
          head -1 ~/.ssh/id_rsa
          echo "SSH key last line:"
          tail -1 ~/.ssh/id_rsa
          
          # Test SSH key format
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.IONOS_HOST }} >> ~/.ssh/known_hosts
          
          # Test SSH connection with verbose output
          ssh -v -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} "echo 'SSH connection successful'"

      - name: Deploy
        run: |
          ssh ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} << 'EOF'
            set -e
          
            # Navigate to project directory
            cd ~/projects/prod/teststarter1
          
            # Pull latest changes (safe even if already on preprod branch)
            git fetch origin
            git checkout main || git checkout -b main origin/main
            git pull origin main
          
            # Login GHCR (token GitHub avec scope packages:read côté serveur)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
          
            # Pull & up
            make down || true
            make up
          
            # Cleanup unused images
            docker image prune -f
          
            # Remove old images except the one just deployed
            docker image ls "ghcr.io/nsevendev/teststarter1/app" --format '{{.Repository}}:{{.Tag}} {{.ID}}' \
            | grep "${TAG_BASE}-" \
            | grep -v "${IMAGE_TAG}" \
            | awk '{print $1}' \
            | xargs -r docker rmi -f
          EOF
