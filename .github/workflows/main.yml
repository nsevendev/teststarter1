name: main

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

concurrency:
  group: main-pipeline
  cancel-in-progress: true

jobs:
  test:
    name: Run tests (main)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create .env files from dist
        run: |
          find . -name "*.env.dist" -exec sh -c 'cp "$1" "${1%%.dist}"' _ {} \;

      - name: Create Docker networks
        run: docker network create traefik-nseven || true

      - name: Start services in dev mode
        run: |
          make up
          sleep 30

      - name: Run frontend tests
        run: make tafc

      - name: Check logs on failure
        if: failure()
        run: |
          echo "=== APP Logs ==="
          make lapp

      - name: Cleanup
        if: always()
        run: make down || true

  release:
    if: github.event_name == 'push'
    needs: test
    name: Semantic release (create tag & GitHub Release)
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.semrel.outputs.new_release_published }}
      tag: ${{ steps.semrel.outputs.new_release_git_tag }}
      version: ${{ steps.semrel.outputs.new_release_version }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # requis par semantic-release

      - uses: actions/setup-node@v4
        with:
          node-version: 22.16.0

      - name: Semantic Release
        id: semrel
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          dry_run: false
          # installe les plugins/presets nécessaires avant executer semantic-release
          extra_plugins: |
            conventional-changelog-conventionalcommits

      - name: Install semantic-release
        run: npm i -D semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build_and_push_prod:
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_BASE: ghcr.io/${{ github.repository }}
      TAG_BASE: prod
      VERSION: ${{ needs.release.outputs.tag }}   # ex: v1.2.3
    strategy:
      matrix:
        service:
          - name: app
            context: ./app
            dockerfile: ./docker/Dockerfile
            target: prod
            # ajoute d'autres services ici si besoin
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}   # on build exactement le code de la release taguée

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Compute tag timestamp (UTC)
        run: echo "TAG_TS=$(date -u +%Y.%m.%d-%H%M)" >> $GITHUB_ENV

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          target: ${{ matrix.service.target }}
          push: true
          platforms: linux/amd64
          build-args: |
            NODE_VERSION=22.16.0
          tags: |
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ env.VERSION }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ github.sha }}
            ${{ env.IMAGE_BASE }}/${{ matrix.service.name }}:${{ env.TAG_BASE }}-${{ env.TAG_TS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 4) Déploiement PROD (ne s’exécute que s’il y a une release)
  deploy_prod:
    needs: build_and_push_prod
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: prod-${{ needs.release.outputs.tag }}  # prod-vX.Y.Z
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.IONOS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.IONOS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on server
        run: |
          ssh ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} << 'EOF'
            set -e
            cd ~/projects/prod/teststarter1

            # pull le code main (si tu gardes des fichiers compose/*.yaml dans le repo)
            git fetch origin
            git checkout main || git checkout -b main origin/main
            git pull origin main

            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
            export APP_ENV=prod

            make down || true
            make up

            docker image prune -f

            # Nettoyage sélectif des vieux tags prod (optionnel)
            TAG_BASE=prod
            docker image ls "ghcr.io/${{ github.repository }}/app" --format '{{.Repository}}:{{.Tag}} {{.ID}}' \
            | grep "${TAG_BASE}-" \
            | grep -v "${IMAGE_TAG}" \
            | awk '{print $1}' \
            | xargs -r docker rmi -f || true
          EOF
